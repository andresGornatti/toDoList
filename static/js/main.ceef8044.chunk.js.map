{"version":3,"sources":["serviceWorker.js","todoredux/components/ButtonTask/ButtonTask.js","todoredux/components/Task/Task.js","todoredux/components/Columna/Columna.js","todoredux/components/AddTask/AddTask.js","todoredux/actions.js","todoredux/constants.js","todoredux/containers/App.js","todoredux/reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","ButtonTask","buttonAction","content","taskId","className","buttonClass","onClick","Task","leftButtonAction","leftButtonContent","deleteTask","specialAction","taskText","taskState","editTask","Columna","columnType","tasks","title","idTaskList","map","task","id","AddTask","addTask","type","autoFocus","placeholder","required","idTask","App","this","props","taskList","activateTask","completeTask","redoTask","tasksToDo","filter","tasksDoing","tasksDone","href","React","Component","connect","state","settingId","length","dispatch","event","target","parentNode","children","value","payload","preventDefault","newText","idTaskCounter","initialStateManageTasks","store","createStore","action","updateTaskList","Object","assign","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ceef8044.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nconst ButtonTask = ({buttonAction, content, taskId, className}) => {\r\n\t let buttonClass = className;\r\n\t if(className==='special-button'){buttonClass = `${content} ${className}`;}\r\n\treturn(\r\n\t\t<button className={buttonClass} onClick={()=>buttonAction(taskId)}/>\r\n\t);\r\n}\r\n\r\nexport default ButtonTask;","import React from \"react\";\r\nimport ButtonTask from \"../ButtonTask/ButtonTask\";\r\nimport \"./Task.css\";\r\n\r\nconst Task = ({leftButtonAction, leftButtonContent, deleteTask, specialAction, taskState, taskText, editTask, taskId}) => {\r\n\t// props: leftButtonAction, buttonActionClose NO, ¿Porqué? ...\r\n\t// Son acciones, no hace falta que vengan del State (MapStateToProps), sino de las acciones (MapDispatchToProps) \r\n\t// leftButtonTaskContent, taskState, taskText SI \r\n\treturn (\r\n\t\t<li className=\"task\">\r\n\t\t<ButtonTask \r\n\t\tbuttonAction={specialAction} \r\n\t\ttaskId={taskId}\r\n\t\tclassName=\"special-button\"\r\n\t\tcontent={leftButtonContent}\r\n\t\t/>\r\n\t\t<span> \r\n\t\tASD\r\n\t\t{taskText}\r\n\t\t </span>\r\n\t\t<ButtonTask \r\n\t\tbuttonAction={deleteTask}\r\n\t\ttaskId={taskId}\r\n\t\tclassName=\"close-button icon-trash\"\r\n\t\t/>\r\n\t\t</li>\r\n\t);\r\n}\r\n\r\nexport default Task;","import React from \"react\";\r\nimport Task from \"../Task/Task\";\r\nimport \"./Columna.css\";\r\n\r\nconst Columna = ({columnType, tasks, title, deleteTask, editTask, specialAction, idTaskList}) => {\r\n\t// props: columnType, tasks, title. || for tasks: deleteTask, editTask, specialAction, idTaskList\r\n\treturn (\r\n\t\t<div className=\"columna\">\r\n\t\t<h2>{title}</h2>\r\n\t\t<ul>\r\n\t\t{\r\n\t\t\ttasks.map((task)=>{\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Task \r\n\t\t\t\t\tdeleteTask={deleteTask} \r\n\t\t\t\t\teditTask={editTask}\r\n\t\t\t\t\tspecialAction={specialAction} \r\n\t\t\t\t\tleftButtonContent={task.leftButtonContent} \r\n\t\t\t\t\ttaskState={task.taskState}\r\n\t\t\t\t\ttaskText={task.taskText}\r\n\t\t\t\t\ttaskId={task.id}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Columna;","import React from \"react\";\r\nimport \"./AddTask.css\";\r\n\r\nconst AddTask = ({addTask}) => {\r\n\t\t\t\t\t\t//onClick={props.addTask}\r\n\treturn(\r\n\t\t<div id=\"add-task-box\">\r\n\t\t<div>\r\n\t\t<input type=\"text\" id=\"text-task\" autoFocus={true} placeholder=\"Agrega una tarea\" required/>\r\n\t     <span className=\"bar\"></span>\r\n\t     {//<label>Task</label>\r\n\t     }\r\n\t\t</div>\r\n\t\t<button type=\"submit\" id=\"add-task\" onClick={addTask}>Agregar</button>\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default AddTask;\r\n\r\n/*\r\n    // \"redux-logger\": \"^3.0.6\",\r\n    // \"redux-thunk\": \"^2.3.0\",\r\n */","import {\r\n\tAGREGAR_TAREA,\r\n\tELIMINAR_TAREA,\r\n\tEDITAR_TAREA,\r\n\tACTIVAR_TAREA,\r\n\tCOMPLETAR_TAREA,\r\n\tREHACER_TAREA,\r\n} from \"./constants\";\r\n\r\nexport const addTask = (textTask) => {\r\n\treturn {\r\n\t\ttype: AGREGAR_TAREA,\r\n\t\tpayload: textTask\r\n\t}\r\n}\r\nexport const deleteTask = (task) => {\r\n\treturn {\r\n\t\ttype: ELIMINAR_TAREA,\r\n\t\tidTask: task\r\n\t}\r\n}\r\nexport const editTask = (task, newText) => {\r\n\treturn {\r\n\t\ttype: EDITAR_TAREA,\r\n\t\tidTask: task,\r\n\t\tpayload: newText\r\n\t}\r\n}\r\nexport const activateTask = (task) => {\r\n\treturn {\r\n\t\ttype: ACTIVAR_TAREA,\r\n\t\tidTask: task\r\n\t}\r\n}\r\nexport const completeTask = (task) => {\r\n\treturn {\r\n\t\ttype: COMPLETAR_TAREA,\r\n\t\tidTask: task\r\n\t}\r\n}\r\nexport const redoTask = (task) => {\r\n\treturn {\r\n\t\ttype: REHACER_TAREA,\r\n\t\tidTask: task\r\n\t}\r\n}","export const AGREGAR_TAREA = \"AGREGAR_TAREA\";\r\n\r\nexport const ELIMINAR_TAREA = \"ELIMINAR_TAREA\";\r\nexport const EDITAR_TAREA = \"EDITAR_TAREA\";\r\nexport const ACTIVAR_TAREA = \"ACTIVAR_TAREA\";\r\nexport const COMPLETAR_TAREA = \"COMPLETAR_TAREA\";\r\nexport const REHACER_TAREA = \"REHACER_TAREA\";\t ","import React from \"react\";\r\nimport \"./todo.css\";\r\nimport Columna from \"../components/Columna/Columna\";\r\nimport AddTask from \"../components/AddTask/AddTask\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTask, deleteTask, editTask, activateTask, completeTask, redoTask} from \"../actions\";\r\n\r\nconst mapStateToProps = state => {\r\n\t\tlet settingId=null;\r\n\t\tif(state.taskList.length===0){settingId = state.taskList.map(task=>task.id)}\r\n\treturn {\r\n\t\ttaskList: state.taskList,\r\n\t\tidTaskList: settingId\r\n\t\t// taskText: state.taskText,\r\n\t\t// taskState: state.taskState,\r\n\t\t// leftButtonAction: state.leftButtonAction,\r\n\t\t// leftButtonTaskContent: state.leftButtonTaskContent,\r\n\t\t// buttonActionClose: state.buttonActionClose,\r\n\t}\r\n} \r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\taddTask: (event) => {\r\n\t\t\tlet task = event.target.parentNode.children[0].children[0].value; \r\n\t\t\tdispatch(addTask(task));\r\n\t\t\tevent.preventDefault();\r\n\t\t},\r\n\t\tdeleteTask: (taskId) => {\r\n\t\t\tdispatch(deleteTask(taskId));\r\n\t\t},\r\n\t\teditTask: (task) => {\r\n\t\t\t//let idTask = task;\r\n\t\t\tdispatch(editTask(task.value))\r\n\t\t},\r\n\t\tactivateTask: (taskId) => {\r\n\t\t\tdispatch(activateTask(taskId));\r\n\t\t},\r\n\t\tcompleteTask: (taskId) => {\r\n\t\t\tdispatch(completeTask(taskId));\r\n\t\t},\r\n\t\tredoTask: (taskId) => {\r\n\t\t\tdispatch(redoTask(taskId));\r\n\t\t},\r\n\t}\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n\t// constructor(){\r\n\t// \tsuper();\r\n\t// }\r\n\r\n\tcomponentDidMount(){\r\n\t\tdeleteTask();\r\n\t}\r\n\r\n\trender(){\r\n\t\t// Map State to Props \r\n\t\tconst {taskList,idTaskList\r\n\t\t//\ttaskText, taskState, leftButtonAction, leftButtonTaskContent, buttonActionClose\r\n\t\t} = this.props;\r\n\t\t// Map Dispatch (actions) to Props\r\n\t\tconst {addTask, deleteTask, editTask, activateTask, completeTask, redoTask} = this.props;\r\n\r\n\t\tconst tasksToDo = taskList.filter(task=>{\r\n\t\t\treturn task.taskState==='listed';\r\n\t\t});\r\n\t\tconst tasksDoing = taskList.filter(task=>{\r\n\t\t\treturn task.taskState==='activated';\r\n\t\t});\r\n\t\tconst tasksDone = taskList.filter(task=>{\r\n\t\t\treturn task.taskState==='completed';\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t<div id=\"todo\">\r\n\t\t\t<header>\r\n\t\t\t\t<AddTask addTask={addTask}/>\r\n\t\t\t</header>\r\n\t\t\t<main>\r\n\t\t\t\t<Columna columnType=\"tasksToDo\" title=\"Tareas por hacer\" tasks={tasksToDo} deleteTask={deleteTask} editTask={editTask} specialAction={activateTask} idTaskList={idTaskList}/>\r\n\t\t\t\t<Columna columnType=\"tasksDoing\" title=\"Haciendo ahora\" tasks={tasksDoing} deleteTask={deleteTask} editTask={editTask} specialAction={completeTask} idTaskList={idTaskList}/>\r\n\t\t\t\t<Columna columnType=\"tasksDone\" title=\"Tareas realizadas\" tasks={tasksDone} deleteTask={deleteTask} editTask={editTask} specialAction={redoTask} idTaskList={idTaskList}/>\r\n\t\t\t</main>\r\n\t\t\t<footer><span><a href=\"https://andresgornatti.github.io/andresGornatti/\">@andresGornatti</a></span></footer>\r\n\t\t</div>\r\n\t );\r\n\t}\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n//export default App;","import {\r\n\tAGREGAR_TAREA,\r\n\tELIMINAR_TAREA,\r\n\tEDITAR_TAREA,\r\n\tACTIVAR_TAREA,\r\n\tCOMPLETAR_TAREA,\r\n\tREHACER_TAREA,\r\n} from \"./constants\";\r\n\r\nlet idTaskCounter = 0;\r\nconst initialStateManageTasks = {\r\n\ttaskList: [\r\n\t//{id:idTaskCounter}\r\n\t]\r\n}\r\nexport const manageTasksR = (state=initialStateManageTasks,action={}) => {\r\n\tif(action.type===AGREGAR_TAREA && action.payload!==''){\r\n\t\tlet updateTaskList = //state.taskList.push({asd:\"asd\"});\r\n\t\t\t\t\t\t\t[...state.taskList, {\r\n\t\t\t\t\t\t\t\t\t\t\t\t  taskText:action.payload, \r\n\t\t\t\t\t\t\t\t\t\t\t\t  taskState:'listed', \r\n\t\t\t\t\t\t\t\t\t\t\t\t  leftButtonContent: 'icon-googleplay', \r\n\t\t\t\t\t\t\t\t\t\t\t\t  id: idTaskCounter,\r\n\t\t\t\t\t\t\t\t\t\t\t\t  //leftButtonAction: 'activateTask', \r\n\t\t\t\t\t\t\t\t\t\t\t\t  //buttonActionClose: true,\r\n\t\t\t\t\t\t\t\t\t\t\t\t  // Al final las acciones no hace falta ponerlas como State, justamente son acciones y no estados.\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t  \t\t\t];\r\n\t\tidTaskCounter++;\r\n\t\treturn Object.assign({}, state, {taskList:updateTaskList})\r\n\t} else {\r\n\t\tswitch(action.type){\r\n\t\t\tcase ELIMINAR_TAREA: {\r\n\t\t\t\tlet updateTaskList = state.taskList.filter(task=>task.id!==action.idTask);\r\n\t\t\t\treturn Object.assign({}, state, {taskList:updateTaskList}); \r\n\t\t\t}\r\n\t\t\tcase EDITAR_TAREA: {\r\n\t\t\t\tlet updateTaskList = state.taskList.map(task=>{\r\n\t\t\t\t\tif(task.id===action.idTask){\r\n\t\t\t\t\t\ttask.taskText = action.payload;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn task;\r\n\t\t\t\t});\r\n\t\t\t\treturn Object.assign({}, state, {taskList:updateTaskList});\r\n\t\t\t}\r\n\t\t\tcase ACTIVAR_TAREA: {\r\n\t\t\t\tlet updateTaskList = state.taskList.map(task=>{\r\n\t\t\t\t\tif(task.id===action.idTask){\r\n\t\t\t\t\t\ttask.taskState = 'activated';\r\n\t\t\t\t\t\ttask.leftButtonContent= 'icon-ok-circled';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn task;\t\r\n\t\t\t\t});\r\n\t\t\t\treturn Object.assign({}, state, {taskList:updateTaskList});\r\n\t\t\t}\r\n\t\t\tcase COMPLETAR_TAREA: {\r\n\t\t\t\tlet updateTaskList = state.taskList.map(task=>{\r\n\t\t\t\t\tif(task.id===action.idTask){\r\n\t\t\t\t\t\ttask.taskState = 'completed';\r\n\t\t\t\t\t\ttask.leftButtonContent= 'icon-recycle';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn task;\t\r\n\t\t\t\t});\r\n\t\t\t\treturn Object.assign({}, state, {taskList:updateTaskList});\r\n\t\t\t}\r\n\t\t\tcase REHACER_TAREA: {\r\n\t\t\t\tlet updateTaskList = state.taskList.map(task=>{\r\n\t\t\t\t\tif(task.id===action.idTask){\r\n\t\t\t\t\t\ttask.taskState = 'activated';\r\n\t\t\t\t\t\ttask.leftButtonContent= 'icon-ok-circled';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn task;\t\r\n\t\t\t\t});\r\n\t\t\t\treturn Object.assign({}, state, {taskList:updateTaskList});\r\n\t\t\t}\r\n\t\t\tdefault: return state;\r\n\t\t}\t\r\n\t}\r\n}\r\n\r\n\r\n\t\t\t// const initialStateTask = {\r\n\t\t\t// \ttaskText: '',\r\n\t\t\t// \ttaskState: '',\r\n\t\t\t// \tleftButtonAction: false,\r\n\t\t\t// \tleftButtonTaskContent: '',\r\n\t\t\t// \tbuttonActionClose: false,\r\n\t\t\t// \tdeleteTask: false,\r\n\t\t\t// \tid: 0,\r\n\t\t\t// }\r\n\r\n\t\t\t// export const manageTaskR = (state=initialStateTask, action={}) => {\r\n\t\t\t// \tswitch(action.type){\r\n\t\t\t// \t\t//case AGREGAR_TAREA:\r\n\t\t\t// \t\t//return Object.assign({}, state, {taskText:action.payload, taskState:'listed', leftButtonAction: 'activateTask', leftButtonTaskContent: 'ACTIVAR', buttonActionClose: true});\r\n\t\t\t// \t\tcase ELIMINAR_TAREA:\r\n\t\t\t// \t\treturn Object.assign({}, state, {deleteTask:true});  \r\n\t\t\t// \t\t// return Object.assign({}, state, {taskState:action.payload});\r\n\t\t\t// \t\t//-------------//\r\n\t\t\t// \t\t// Otra opción: Object.assign({}, state, {taskState:action.payload});\r\n\t\t\t// \t\t// y el payload una función ejecutada automaticamente para eliminar task. O combinar las 2!\r\n\t\t\t// \t\t// Mi duda es si acá debo ejecutar la acción o sólo poner el nombre del estado, y luego en App.js hago un swtich según el estado ejecutar cierta acción\r\n\t\t\t// \t\t//------------//\r\n\t\t\t// \t\tcase EDITAR_TAREA:\r\n\t\t\t// \t\treturn Object.assign({}, state, {taskText:action.payload});\r\n\t\t\t// \t\tcase ACTIVAR_TAREA:\r\n\t\t\t// \t\treturn Object.assign({}, state, {taskState:'activated', leftButtonAction: 'completeTask', leftButtonTaskContent: 'COMPLETAR'});\r\n\t\t\t// \t\t// return Object.assign({}, state, {taskState:action.payload});\r\n\t\t\t// \t\t// ----- //\r\n\t\t\t// \t\t// Atención, al ACTIVAR TAREA me faltaría la opción para volver la Tarea a la Lista de Tareas por hacer,\r\n\t\t\t// \t\t// como en Tareas completadas que pueden volver a Tareas Haciendo en el momento\r\n\t\t\t// \t\t// ----- //\r\n\t\t\t// \t\tcase COMPLETAR_TAREA:\r\n\t\t\t// \t\treturn Object.assign({}, state, {taskState:'completed', leftButtonAction: 'deleteTask', leftButtonTaskContent: 'ELIMINAR'});\r\n\t\t\t// \t\t// return Object.assign({}, state, {taskState:action.payload});\r\n\t\t\t// \t\tcase REHACER_TAREA:\r\n\t\t\t// \t\treturn Object.assign({}, state, {taskState:'activated', leftButtonAction: 'completeTask', leftButtonTaskContent: 'COMPLETAR'});\r\n\t\t\t// \t\t// return Object.assign({}, state, {taskState:action.payload});\r\n\t\t\t// \t\tdefault: return state;\r\n\t\t\t// \t}\r\n\t\t\t// \treturn state;\r\n\t\t\t// }","// ROBOFRIENDS\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import {Provider} from \"react-redux\";\n// import {createStore, applyMiddleware, combineReducers} from \"redux\";\n// import {createLogger} from \"redux-logger\";\n// import thunkMiddleware from \"redux-thunk\";\n// import {buscarRobots, requestRobots} from \"./robofriends/reducers\";\n// import App from './robofriends/containers/App';\n// import \"tachyons\";\n// import './index.css';\n// //import Card from \"./Card\";\n// //import CardList from \"./CardList\";\n// import * as serviceWorker from './serviceWorker';\n\n// const logger = createLogger();\n// const rootReducer = combineReducers({buscarRobots, requestRobots});\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n// ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// \t// If you want your app to work offline and load faster, you can change\n// \t// unregister() to register() below. Note this comes with some pitfalls.\n// \t// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n// ---------------------------------------------- //\n\n// TEMPLATE\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import \"tachyons\";\n// import './index.css';\n// import App from \"./maqueta/containers/App\";\n// import * as serviceWorker from './serviceWorker';\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// \t// If you want your app to work offline and load faster, you can change\n// \t// unregister() to register() below. Note this comes with some pitfalls.\n// \t// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\n// \t// Colores Novacor brand:   #452A9D #64598B   #FF9613 #FFAC44\n\n\n// ---------------------------------------------- //\n\n// TODO-REDUX\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./todoredux/containers/App\";\n\t//import {applyMiddleware, createStore} from \"redux\";\nimport {createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\n\t//import {createLogger} from \"redux-logger\";\n\t//import thunkMiddleware from \"redux-thunk\";\nimport {manageTasksR} from \"./todoredux/reducers\";\n\n\t//const logger = createLogger();\n\t//const rootReducer = combineReducers({manageTaskR, addTaskR});\n\t//const store = createStore(manageTasksR, applyMiddleware(thunkMiddleware, logger));\nconst store = createStore(manageTasksR);\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}