{"version":3,"sources":["serviceWorker.js","todoredux/requests.js","todoredux/components/SessionNav/SessionNav.js","todoredux/components/Header/Header.js","todoredux/components/UserForm/UserForm.js","todoredux/components/ButtonTask/ButtonTask.js","todoredux/utils/ItemTypes.js","todoredux/components/Task/Task.js","todoredux/components/Columna/Columna.js","todoredux/components/AddTask/AddTask.js","todoredux/actions.js","todoredux/constants.js","todoredux/containers/App.js","todoredux/reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","svUrl","addTaskDB","task","a","token","sessionStorage","getItem","request","method","headers","body","JSON","stringify","fetch","response","json","readTasksDB","tasks","deleteTaskDB","_id","deletedTask","updateTaskDB","id","update","updatedTask","createUserDB","dataUser","newUser","ok","Error","setItem","user","tkn","loginUserDB","userLogged","logoutUserDB","removeItem","getUserLoggedDB","session","SessionNav","setRoute","updateUserSession","logout","onClick","Header","route","inUserForm","className","UserForm","props","state","email","name","password","this","readTasks","login","e","preventDefault","validator","isEmail","isEmpty","isAlphanumeric","loginUser","signup","handleInputValue","input","target","getAttribute","value","setState","action","onChange","type","required","htmlFor","React","Component","ButtonTask","buttonAction","content","taskId","buttonClass","ItemTypes","TASK","Task","leftButtonContent","taskState","description","useContext","TaskContext","deleteTask","editTask","updateTask","useDrag","item","collect","monitor","isDragging","drag","handleEdit","handleFocusOut","oldTask","textContent","setAttribute","focus","persist","addEventListener","keyCode","taskText","removeAttribute","removeEventListener","opacity","ref","style","contentEditable","onDoubleClick","onKeyDown","Columna","columnType","title","idTaskList","useDrop","accept","drop","actionForDroppedTask","isOver","height","document","querySelector","offsetHeight","map","key","AddTask","addTask","placeholder","autoFocus","onKeyUp","parentNode","children","handleAddTask","payload","idTask","taskUpdate","sessionState","getUserLogged","validateSession","validToken","isJWT","createContext","App","readUser","pageContent","taskList","tasksPending","filter","tasksDoing","tasksFinished","Provider","DndProvider","backend","Backend","href","connect","settingId","length","dispatch","sessionValid","reqBody","taskSaved","uuidv4","data","userData","initialStateManageTasks","store","createStore","updateTaskList","Object","assign","keys","forEach","upd","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e624263b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const svUrl = 'https://gornatti-justdoit-api.herokuapp.com' \r\nexport const addTaskDB = async task => {\r\n\tconst token = sessionStorage.getItem('session')\r\n\ttry {\r\n\t\tconst request = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {'Content-Type':'application/json',\r\n\t\t\t\t\t  'Authorization':`Bearer ${token}`},\r\n\t\t\tbody: JSON.stringify(task)\r\n\t\t}\r\n\t\tlet response = await fetch(`${svUrl}/tasks`, request)\r\n\t \treturn await response.json()\r\n\t} catch (e) { return false }\r\n}\r\n\r\nexport const readTasksDB = async () => {\r\n\t//const {_id} = user\r\n\tconst token = sessionStorage.getItem('session')\r\n\ttry {\r\n\t\tconst request = {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {'Content-Type':'application/json',\r\n\t\t\t\t\t  'Authorization':`Bearer ${token}`}\r\n\t\t\t//body: JSON.stringify(_id)\r\n\t\t}\r\n\t\tconst tasks = await fetch(`${svUrl}/tasks`, request)\r\n\t\treturn await tasks.json()\r\n\t} catch (e) { return false }\r\n}\r\n\r\nexport const deleteTaskDB = async _id => {\r\n\tconst token = sessionStorage.getItem('session')\r\n\ttry {\r\n\t\tconst request = {\r\n\t\t\t// mode: 'no-cors',\r\n\t\t\tmethod: 'delete',\r\n\t\t\theaders: {'Content-Type':'application/json',\r\n\t\t\t\t\t  'Authorization':`Bearer ${token}`},\r\n\t\t\tbody: JSON.stringify({_id})\r\n\t\t}\r\n\t\tconst response = await fetch(`${svUrl}/tasks/${_id}`, request)\r\n\t\tconst deletedTask = await response.json()\r\n\t\t//if(!deletedTask) return false\r\n\t\treturn deletedTask\r\n\t} catch (e) { return false }\r\n}\r\n\r\nexport const updateTaskDB = async (id, update) => {\r\n\tconst token = sessionStorage.getItem('session')\r\n\ttry {\r\n\t\tconst request = {\r\n\t\t\tmethod: 'PATCH',\r\n\t\t\theaders: {'Content-Type':'application/json',\r\n\t\t\t\t\t  'Authorization':`Bearer ${token}`},\r\n\t\t\tbody: JSON.stringify(update)\r\n\t\t}\r\n\t\tconst response = await fetch(`${svUrl}/tasks/${id}`, request)\r\n\t\tconst updatedTask = await response.json()\r\n\t\tif(!updatedTask) return false\r\n\t\treturn updatedTask\r\n\t} catch (e) { return false }\r\n}\r\n\r\nexport const createUserDB = async dataUser => {\r\n\t//const {email, name, password} = user\r\n\ttry {\r\n\t\tconst request = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {'Content-Type':'application/json'},\r\n\t\t\tbody: JSON.stringify(dataUser)\r\n\t\t}\r\n\t\tconst response = await fetch(`${svUrl}/users`, request)\r\n\t\tconst newUser = await response.json()\r\n\t\tif (!response.ok) throw new Error()\r\n\t\tsessionStorage.setItem('session', newUser.token)\r\n\t\tconst user = newUser.user\r\n\t\tconst tkn =  newUser.token \r\n\t\treturn {...user, tkn}\r\n\t} catch (e) { return false }\r\n}\r\n\r\nexport const loginUserDB = async (user) => {\r\n\t//const {email, password} = user\r\n\ttry {\r\n\t\tconst request = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {'Content-Type':'application/json'},\r\n\t\t\tbody: JSON.stringify(user)\t\t\t\t\r\n\t\t}\r\n\t\tconst response = await fetch(`${svUrl}/users/login`, request)\r\n\t\tconst userLogged = await response.json()\r\n\t\tif (!response.ok) throw new Error()\r\n\t\tsessionStorage.setItem('session', userLogged.token)\r\n\t\treturn userLogged\r\n\t} catch (e) { return false } \r\n}\r\n\r\nexport const logoutUserDB = async user => {\r\n\tconst token = sessionStorage.getItem('session')\r\n\ttry {\r\n\t\tconst request = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {'Content-Type':'application/json',\r\n\t\t\t\t\t  'Authorization':`Bearer ${token}`}\t\t\t\t\r\n\t\t}\r\n\t\tconst logout = await fetch(`${svUrl}/users/logout`, request)\r\n\t\tif (!logout) throw new Error()\r\n\t\tsessionStorage.removeItem('session')\r\n\t\treturn true\r\n\t} catch (e) { return false } \r\n}\r\n\r\nexport const getUserLoggedDB  = async session => {\r\n\ttry {\r\n\t\tconst request = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {'Content-Type':'application/json',\r\n\t\t\t\t\t  'Authorization':`Bearer ${session}`}\r\n\t\t}\r\n\t\tconst response = await fetch(`${svUrl}/users/login/profile`, request)\r\n\t\tconst user = await response.json()\r\n\t\tif(!response.ok) throw new Error()\r\n\t\treturn user\r\n\t} catch (e) { return false }\r\n}\r\n","import React from 'react';\r\nimport {logoutUserDB} from \"../../requests\";\r\n\r\nconst SessionNav = ({userLogged, setRoute, updateUserSession}) => {\r\n\t\r\n\tconst logout = async () => {\r\n\t\tconst loggedOut = await logoutUserDB()\r\n\t\tif (!loggedOut) return false\r\n\t\tawait updateUserSession('logout')\r\n\t\tsetRoute('tasks')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t\r\n\t\t\t{  !userLogged ? ( \r\n\t\t\t\t \t<ul>\r\n\t\t\t\t \t <li onClick={()=>setRoute('signup')}><span>Regístrate</span></li>\r\n\t\t\t\t \t <li onClick={()=>setRoute('login')}><span>Inicia sesión</span></li>\r\n\t\t\t\t \t</ul>\r\n\t\t\t\t) : (<ul><li onClick={logout}><span>Cerrar sesión</span></li></ul>) \r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SessionNav","import React from 'react'\r\nimport './Header.css'\r\nimport SessionNav from '../SessionNav/SessionNav'\r\n//import ButtonHeader from '../ButtonHeader/ButtonHeader'\r\n\r\nconst Header = ({userLogged, setRoute, route, updateUserSession}) => {\r\n\tconst inUserForm = route.match(/(login|signup)/) ? true : false\r\n\treturn (\r\n\t\t<header className={`header ${route}`}>\r\n\t\t{\r\n\t\t//<button id=\"btn-side-bar\" className=\"close-button icon-trash\"/>\r\n\t\t} \r\n\t\t <div onClick={()=>setRoute('tasks')} id=\"logo\">JustDoIt</div>\r\n\t\t { !inUserForm ? <SessionNav userLogged={userLogged} setRoute={setRoute}\r\n\t\t \t\t\t\t updateUserSession={updateUserSession}/> : false }\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './UserForm.css'\r\nimport validator from 'validator'\r\nimport {createUserDB, loginUserDB} from \"../../requests\";\r\n\r\nclass UserForm extends React.Component {\r\n\t\tconstructor(props){\r\n\t\t\tsuper(props)\r\n\t\t\tthis.state = {\r\n\t\t\t\temail: '',\r\n\t\t\t\tname: '',\r\n\t\t\t\tpassword: ''\r\n\t\t\t}\r\n\t\t}\r\n\trender(){\r\n\t\tconst {userLogged, setRoute, route, updateUserSession, readTasks} = this.props\r\n\r\n\t\tconst login = async (e) => {\r\n\t\t\tif(userLogged) return false\r\n\t\t\te.preventDefault()\r\n\t\t\tconst {email, password} = this.state\r\n\t\t\tif (!validator.isEmail(email)) return false\r\n\t\t\tif (validator.isEmpty(password) || !validator.isAlphanumeric(password)) return false\r\n\t\t\tconst user = {email, password}\r\n\t\t\tconst loginUser = await loginUserDB(user)\r\n\t\t\tif (!loginUser) return false\r\n\t\t\tawait updateUserSession('login', loginUser)\r\n\t\t\tawait readTasks()\r\n\t\t\tsetRoute('tasks')\r\n\t\t}\r\n\t\tconst signup = async e => {\r\n\t\t\tif(userLogged) return false\r\n\t\t\te.preventDefault()\r\n\t\t\tconst {email, password, name} = this.state\r\n\t\t\tif (!validator.isEmail(email)) return false\r\n\t\t\tif (validator.isEmpty(password) || !validator.isAlphanumeric(password)) return false\r\n\t\t\tif (validator.isEmpty(name) || !validator.isAlphanumeric(name)) return false\r\n\t\t\tconst user = {name, email, password}\r\n\t\t\tconst newUser = await createUserDB(user)\r\n\t\t\tif (!newUser) return false\r\n\t\t\tawait updateUserSession('signup', newUser)\r\n\t\t\tsetRoute('tasks')\r\n\t\t}\r\n\t\tconst handleInputValue = e => {\r\n\t\t\tconst input = e.target.getAttribute('name')\r\n\t\t\tconst value = e.target.value\r\n\t\t\tthis.setState({[input]: value})\r\n\t\t}\r\n\t\t\r\n\t\tif (route==='login') {\r\n\t\t\treturn (\r\n\t\t\t\t<form method='POST' action='/'>\r\n\t\t\t  \t <h2>Logueate</h2>\r\n\t\t\t\t   <div className=\"input-container\">\r\n\t\t\t\t    <input onChange={e=>handleInputValue(e)} type=\"text\" name=\"email\" required/>\r\n\t\t\t\t    <span className=\"bar\"></span>\r\n\t\t\t\t   <label className='input-label' htmlFor='input'>E-mail</label>\r\n\t\t\t\t   </div>\r\n\t\t\t\t   <div className=\"input-container\">\r\n\t\t\t\t    <input onChange={e=>handleInputValue(e)} type=\"password\" name=\"password\" required/> \r\n\t\t\t\t    <span className=\"bar\"></span>\r\n\t\t\t\t    <label className='input-label' htmlFor='input'>Contraseña</label>\r\n\t\t\t\t   </div>\r\n\t\t\t     <div className=\"button-container\">\r\n\t\t\t      <button type=\"submit\" onClick={e=>login(e)}>Entrar</button>\r\n\t\t\t      <button type=\"button\" onClick={()=>setRoute('signup')}>Registrarse</button>\r\n\t\t\t     </div>\r\n\t\t\t\t</form>\r\n\t\t\t)\r\n\t\t} \r\n\t\telse if (route==='signup') {\r\n\t\t\treturn (\r\n\t\t\t\t<form method='POST' action='/'>\r\n\t\t\t  \t <h2>Registrate</h2>\r\n\t\t\t  \t   <div className=\"input-container\">\r\n\t\t\t\t    <input onChange={e=>handleInputValue(e)} type=\"text\" name=\"name\" required/>\r\n\t\t\t\t    <span className=\"bar\"></span>\r\n\t\t\t\t   <label className='input-label' htmlFor='input'>Nombre</label>\r\n\t\t\t\t   </div>\r\n\t\t\t\t   <div className=\"input-container\">\r\n\t\t\t\t    <input onChange={e=>handleInputValue(e)} type=\"text\" name=\"email\" required/>\r\n\t\t\t\t    <span className=\"bar\"></span>\r\n\t\t\t\t   <label className='input-label' htmlFor='input'>E-mail</label>\r\n\t\t\t\t   </div>\r\n\t\t\t\t   <div className=\"input-container\">\r\n\t\t\t\t    <input onChange={e=>handleInputValue(e)} type=\"password\" name=\"password\" required/> \r\n\t\t\t\t    <span className=\"bar\"></span>\r\n\t\t\t\t    <label className='input-label' htmlFor='input'>Contraseña</label>\r\n\t\t\t\t   </div>\r\n\t\t\t     <div className=\"button-container\">\r\n\t\t\t      <button type=\"submit\" onClick={e=>signup(e)}>Registrar</button>\r\n\t\t\t      <button type=\"button\" onClick={()=>setRoute('login')}>Loguearse</button>\r\n\t\t\t     </div>\r\n\t\t\t\t</form>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default UserForm","import React from \"react\";\r\n\r\nconst ButtonTask = ({buttonAction, content, taskId, className}) => {\r\n\r\n\r\n\t let buttonClass = className;\r\n\t if(className==='special-button'){buttonClass = `icon-${content} ${className}`}\r\n\treturn(\r\n\t\t<button className={buttonClass} onClick={()=>buttonAction(taskId)}/>\r\n\t);\r\n}\r\n\r\nexport default ButtonTask;","const ItemTypes = {\r\n\tTASK: 'task'\r\n}\r\nexport default ItemTypes","// React\r\nimport React from \"react\"\r\nimport {TaskContext} from '../../containers/App'\r\n// Custom\r\nimport ButtonTask from \"../ButtonTask/ButtonTask\"\r\nimport \"./Task.css\"\r\n// D&D\r\nimport { useDrag } from 'react-dnd'\r\nimport ItemTypes from '../../utils/ItemTypes'\r\n\r\nconst Task = ({leftButtonContent, taskState, description, taskId}) => {\r\n\r\n\tconst {deleteTask, editTask, updateTask} = React.useContext(TaskContext)\r\n\r\n\t// LeftButton Update TaskState \r\n\tconst updateTo = () => {\r\n\t\tswitch (taskState) {\r\n\t\t\tcase 'pending':\r\n\t\t\treturn updateTask(taskId,{taskState:'doing'})\r\n\t\t\tcase 'doing':\r\n\t\t\treturn updateTask(taskId,{taskState:'finished'})\r\n\t\t\tcase 'finished':\r\n\t\t\treturn updateTask(taskId,{taskState:'doing'})\r\n\t\t\tdefault: return false\r\n\t\t}\r\n\t}\r\n\r\n\t// Draggable Element\r\n\tconst [{isDragging}, drag] = useDrag({\r\n\t\titem: {taskId, type: ItemTypes.TASK},\r\n\t\tcollect: monitor => ({\r\n\t\t\tisDragging: monitor.isDragging() ? true : false\r\n\t\t})\r\n\t})\r\n\r\n\tconst handleEdit = function(e){\r\n\t\tconst task = e.target\r\n\t\t\r\n\t\t// When focus out DON'T save\r\n\t\tlet handleFocusOut = (e, oldTask) => () => {\r\n\t\t\ttask.textContent = oldTask\r\n\t\t} \r\n\r\n\t\t// Enable Edit\r\n\t\tif(e.type==='dblclick'){\r\n\t\t\ttask.setAttribute('contentEditable','true')\r\n\t\t\ttask.focus()\r\n\t\t\tlet oldTask = e.target.textContent\r\n\t\t\te.persist()\r\n\t\t\ttask.addEventListener('blur', handleFocusOut(e,oldTask))\r\n\t\t}\r\n\r\n\t\t// When press Enter Save Edit\r\n\t\tif(e.keyCode===13){\r\n\t\t\tconst taskText = task.textContent\r\n\t\t\te.preventDefault()\r\n\t\t\ttask.removeAttribute('contentEditable')\r\n\t\t\ttask.removeEventListener('blur', handleFocusOut)\r\n\t\t\teditTask(taskId, taskText)\r\n\t\t}\r\n\t}\r\n\r\n\tlet opacity = isDragging ? .2 : 1\r\n\t\r\n\treturn (\r\n\t\t<li className=\"task\" ref={drag} style={{opacity}}>\r\n\t\t<ButtonTask \r\n\t\t buttonAction={updateTo} \r\n\t\t taskId={taskId}\r\n\t\t className=\"special-button\"\r\n\t\t content={taskState}\r\n\t\t/>\r\n\t\t<span contentEditable={false} onDoubleClick={(e)=>handleEdit(e)} onKeyDown={(e)=>handleEdit(e)} style={{'cursor':'text'}}> \r\n\t\t {description}\r\n\t\t</span>\r\n\t\t<ButtonTask \r\n\t\t buttonAction={deleteTask}\r\n\t\t taskId={taskId}\r\n\t\t className=\"close-button icon-trash\"\r\n\t\t/>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default Task;","// React\r\nimport React from \"react\";\r\nimport {TaskContext} from '../../containers/App'\r\n// Custom\r\nimport Task from \"../Task/Task\";\r\nimport \"./Columna.css\";\r\n// D&D\r\nimport { useDrop } from 'react-dnd'\r\nimport ItemTypes from '../../utils/ItemTypes'\r\n\r\n\r\nconst Columna = ({columnType, tasks, title}) => {\r\n\t// props: columnType, tasks, title. || for tasks: idTaskList\r\n\r\n\tconst {updateTask, idTaskList} = React.useContext(TaskContext)\r\n\r\n\tconst actionForDroppedTask = (taskId) => {\r\n\t\tswitch(columnType){\r\n\t\t\tcase 'tasksPending':\r\n\t\t\treturn updateTask(taskId,{taskState:'pending'})\r\n\t\t\tcase 'tasksDoing':\r\n\t\t\treturn updateTask(taskId,{taskState:'doing'})\r\n\t\t\tcase 'tasksFinished':\r\n\t\t\treturn updateTask(taskId,{taskState:'finished'})\r\n\t\t\tdefault: return false\r\n\t\t}\r\n\t}\r\n\r\n\tconst [{isOver}, drop] = useDrop({\r\n\t\taccept:ItemTypes.TASK,\r\n\t\tdrop: (item, monitor) => actionForDroppedTask(item.taskId),\r\n\t\tcollect: monitor => ({\r\n\t\t\tisOver: monitor.isOver() ? true : false\r\n\t\t})\r\n\t})\r\n\t\r\n\tlet height = isOver ? `calc(${document.querySelector(`.columna.${columnType}`).offsetHeight}px + 30px)` : 'initial'\r\n\treturn (\r\n\t\t<div className={`columna ${columnType}`} ref={drop} style={{height}}>\r\n\t\t<h2>{title}</h2>\r\n\t\t<ul>\r\n\t\t{\r\n\t\t\ttasks.map((task)=>{\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Task\r\n\t\t\t\t\ttaskState={task.taskState}\r\n\t\t\t\t\tdescription={task.description}\r\n\t\t\t\t\ttaskId={task._id}\r\n\t\t\t\t\tkey={task._id}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t}\r\n\t\t</ul>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Columna;","import React from \"react\";\r\nimport \"./AddTask.css\";\r\n\r\nconst AddTask = ({addTask}) => {\r\n\t\r\n\tconst handleAddTask = (e) => {\r\n\t\tlet task;\r\n\t\t// Key Enter Event  \r\n\t\tif(e.keyCode===13) task = e.target.value \r\n\t\t// Click Event\r\n\t\tif(e.type==='click') task = e.target.parentNode.children[0].children[0].value\r\n\t\t\r\n\t\tif (task) return addTask(task)\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div id=\"add-task-box\">\r\n\t\t<div>\r\n\t\t<input type=\"text\" id=\"text-task\" placeholder=\"Agrega una tarea\" \r\n\t\t \t   autoFocus={true}  required onKeyUp={(e)=>handleAddTask(e)}/>\r\n\t     <span className=\"bar\"></span>\r\n\t     {//<label>Task</label>\r\n\t\t//<button type=\"submit\" id=\"add-task\" onClick={(e)=>handleAddTask(e)}>Agregar</button>\r\n\t     }\r\n\t\t</div>\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default AddTask;\r\n","import {\r\n\tAGREGAR_TAREA,\r\n\tELIMINAR_TAREA,\r\n\tEDITAR_TAREA,\r\n\tLEER_TAREAS,\r\n\tACTUALIZAR_TAREA,\r\n\tSETEAR_RUTA,\r\n\tACTUALIZAR_SESION,\r\n\tLEER_USUARIO\r\n} from \"./constants\";\r\n\r\nexport const readTasks = (tasks) => {\r\n\treturn {\r\n\t\ttype: LEER_TAREAS,\r\n\t\tpayload: tasks\t\t\r\n\t}\r\n}\r\n\r\nexport const addTask = (task) => {\r\n\treturn {\r\n\t\ttype: AGREGAR_TAREA,\r\n\t\tpayload: task\r\n\t}\r\n}\r\nexport const deleteTask = (task) => {\r\n\treturn {\r\n\t\ttype: ELIMINAR_TAREA,\r\n\t\tidTask: task\r\n\t}\r\n}\r\nexport const editTask = (idTask, newText) => {\r\n\treturn {\r\n\t\ttype: EDITAR_TAREA,\r\n\t\tidTask,\r\n\t\tpayload: newText\r\n\t}\r\n}\r\nexport const updateTask = (idTask, taskUpdate) => {\r\n\treturn {\r\n\t\ttype: ACTUALIZAR_TAREA,\r\n\t\tidTask,\r\n\t\ttaskUpdate\r\n\t}\r\n}\r\nexport const setRoute = (route) => {\r\n\treturn {\r\n\t\ttype: SETEAR_RUTA,\r\n\t\tpayload: route \r\n\t}\r\n}\r\nexport const updateUserSession = (sessionState, user) => {\r\n\treturn {\r\n\t\ttype: ACTUALIZAR_SESION,\r\n\t\tsessionState,\r\n\t\tuser\r\n\t}\r\n}\r\n\r\nexport const getUserLogged = (user) => {\r\n\treturn {\r\n\t\ttype: LEER_USUARIO,\r\n\t\tuser\r\n\t}\r\n}","export const LEER_TAREAS = \"LEER_TAREAS\";\r\n\r\nexport const AGREGAR_TAREA = \"AGREGAR_TAREA\";\r\nexport const ELIMINAR_TAREA = \"ELIMINAR_TAREA\";\r\nexport const EDITAR_TAREA = \"EDITAR_TAREA\";\t \r\nexport const ACTUALIZAR_TAREA = \"ACTUALIZAR_TAREA\";\r\n\r\nexport const SETEAR_RUTA = \"SETEAR_RUTA\";\r\n\r\nexport const ACTUALIZAR_SESION = \"ACTUALIZAR_SESION\";\r\nexport const LEER_USUARIO = \"LEER_USUARIO\";","// React\r\nimport React from \"react\";\r\nimport \"./todo.css\";\r\n// Components\r\nimport Header from \"../components/Header/Header\";\r\nimport UserForm from \"../components/UserForm/UserForm\";\r\nimport Columna from \"../components/Columna/Columna\";\r\nimport AddTask from \"../components/AddTask/AddTask\";\r\n// Redux, actions to props, connecting to Database when actiones are triggered\r\nimport {connect} from \"react-redux\";\r\nimport {addTask, readTasks, deleteTask, editTask, updateTask, setRoute, updateUserSession, getUserLogged} from \"../actions\";\r\nimport {addTaskDB, readTasksDB, deleteTaskDB, updateTaskDB, getUserLoggedDB} from \"../requests\";\r\n// D&D\r\nimport Backend from 'react-dnd-html5-backend'\r\nimport { DndProvider } from 'react-dnd'\r\n\r\n// Check JWT\r\nimport validator from 'validator'\r\n// Generate UUID for Tasks\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n\r\nconst validateSession = function(){\r\n\tconst session = sessionStorage.getItem('session')\r\n\tlet validToken\r\n\tif (session) { validToken = validator.isJWT(session) }\r\n\tconst isUserValid = (session && validToken) ? true : false\r\n\treturn isUserValid\t\t\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\t\tlet settingId=null;\r\n\t\tif(state.taskList.length===0){settingId = state.taskList.map(task=>task.id)}\r\n\treturn {\r\n\t\ttaskList: state.taskList,\r\n\t\tidTaskList: settingId,\r\n\t\troute: state.route,\r\n\t\tuserLogged: state.userLogged,\r\n\t\tuser: state.user\r\n\t\t// taskText: state.taskText,\r\n\t\t// taskState: state.taskState,\r\n\t\t// leftButtonAction: state.leftButtonAction,\r\n\t\t// leftButtonTaskContent: state.leftButtonTaskContent,\r\n\t\t// buttonActionClose: state.buttonActionClose,\r\n\t}\r\n} \r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\tconst sessionValid = validateSession()\r\n\treturn {\r\n\t\taddTask: async task => {\r\n\t\t\tif (sessionValid) {\r\n\t\t\t\tlet reqBody = {\"description\": task}\r\n\t\t\t\tconst taskSaved = await addTaskDB(reqBody)\r\n\t\t\t\tif(!taskSaved) return false\r\n\t\t\t\tdispatch(addTask(taskSaved))\r\n\t\t\t} else {\r\n\t\t\t\tlet reqBody = {\"description\": task, \"taskState\": \"pending\", \"_id\": uuidv4()}\r\n\t\t\t\tdispatch(addTask(reqBody))\t\r\n\t\t\t}\r\n\t\t},\r\n\t\treadTasks: async id => {\r\n\t\t\t\tconst tasks = await\treadTasksDB()\r\n\t\t\t\tdispatch(readTasks(tasks))\r\n\t\t},\r\n\t\tdeleteTask: async taskId => {\r\n\t\t\tif (sessionValid) {\r\n\t\t\t\t// first dispatch for better UX\r\n\t\t\t\tdispatch(deleteTask(taskId))\r\n\t\t\t\tconst deletedTask = await deleteTaskDB(taskId)\r\n\t\t\t\tif(!deletedTask) return false\r\n\t\t\t} else {\r\n\t\t\t\tdispatch(deleteTask(taskId))\r\n\t\t\t}\r\n\t\t},\r\n\t\teditTask: async (taskId, taskText) => {\r\n\t\t\tif (sessionValid) {\r\n\t\t\t\t// first dispatch for better UX\r\n\t\t\t\tconst update = {description: taskText}\r\n\t\t\t\tdispatch(updateTask(taskId, update))\r\n\t\t\t\tconst taskUpdated = await updateTaskDB(taskId, update)\r\n\t\t\t\tif(!taskUpdated) return false\r\n\t\t\t} else {\r\n\t\t\t\tdispatch(editTask(taskId, taskText))\r\n\t\t\t}\r\n\t\t},\r\n\t\tupdateTask: async (taskId, update) => {\r\n\t\t\tif(sessionValid) {\r\n\t\t\t\t// first dispatch for better UX\r\n\t\t\t\tdispatch(updateTask(taskId, update))\r\n\t\t\t\tconst taskUpdated = await updateTaskDB(taskId, update)\r\n\t\t\t\tif(!taskUpdated) return false\r\n\t\t\t} else {\r\n\t\t\t\tdispatch(updateTask(taskId, update))\r\n\t\t\t}\r\n\t\t},\r\n\t\tsetRoute: async route => {\r\n\t\t\tdispatch(setRoute(route))\r\n\t\t},\r\n\t\tupdateUserSession: async (sessionState, data) => {\r\n\t\t\tlet userData\r\n\t\t\tif (data) {\r\n\t\t\t let {user, token} = data\r\n\t\t\t userData = {...user, token}\r\n\t\t\t} else {\r\n\t\t\t userData = null \r\n\t\t\t} \r\n\t\t\tdispatch(updateUserSession(sessionState, userData))\r\n\t\t},\r\n\t\tgetUserLogged: async () => {\r\n\t\t\tconst tkn = sessionStorage.getItem(\"session\")\r\n\t\t\tconst user = await getUserLoggedDB(tkn)\r\n\t\t\tif (!user) return false\r\n\t\t\tconst userData = {...user, tkn}\r\n\t\t\tdispatch(getUserLogged(userData))\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const TaskContext = React.createContext({\r\n\tupdateTask: null,\r\n\tdeleteTask: null,\r\n\teditTask: null,\r\n\tidTaskList: null\r\n})\r\n\r\nclass App extends React.Component {\r\n\r\n\tcomponentDidMount(){\r\n\t\tconst readUser = async () => {\r\n\t\t\tconst sessionValid = validateSession()\r\n\t\t\tif(sessionValid){\r\n\t\t\t\tawait this.props.getUserLogged()\r\n\t\t\t\tthis.props.readTasks()\r\n\t\t\t}\r\n\t\t}\r\n\t\treadUser()\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\t// Map State to Props \r\n\t\tconst {taskList,idTaskList, userLogged, route\r\n\t\t//\ttaskText, taskState, leftButtonAction, leftButtonTaskContent, buttonActionClose\r\n\t\t} = this.props;\r\n\t\t// Map Dispatch (actions) to Props\r\n\t\tconst {addTask, deleteTask, editTask, updateTask, setRoute, readTasks, updateUserSession} = this.props;\r\n\r\n\t\tconst tasksPending = taskList.filter(task=>{\r\n\t\t\treturn task.taskState==='pending'\r\n\t\t})\r\n\t\tconst tasksDoing = taskList.filter(task=>{\r\n\t\t\treturn task.taskState==='doing'\r\n\t\t})\r\n\t\tconst tasksFinished = taskList.filter(task=>{\r\n\t\t\treturn task.taskState==='finished'\r\n\t\t})\r\n\r\n\t\tlet pageContent;\r\n\t\t\tswitch(route){\r\n\t\t\t\tcase 'tasks': pageContent = (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t <AddTask addTask={addTask}/>\r\n\t\t\t\t\t <div id=\"tasks-container\">\r\n\t\t\t\t\t <TaskContext.Provider value={{updateTask, deleteTask, editTask, idTaskList}}>\r\n\t\t\t\t\t  <DndProvider backend={Backend}>\t\t\r\n\t\t\t\t\t \t<Columna columnType=\"tasksPending\" title=\"Tareas por hacer\" tasks={tasksPending}/>\r\n\t\t\t\t\t \t<Columna columnType=\"tasksDoing\" title=\"Haciendo ahora\" tasks={tasksDoing}/>\r\n\t\t\t\t\t \t<Columna columnType=\"tasksFinished\" title=\"Tareas realizadas\" tasks={tasksFinished}/>\r\n\t\t\t\t\t  </DndProvider>\r\n\t\t\t\t\t </TaskContext.Provider>\r\n\t\t\t\t\t </div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase ('signup'): case ('login'): pageContent = \r\n\t\t\t\t\t(<div id='form-container'>\r\n\t\t\t\t\t   <UserForm userLogged={userLogged} updateUserSession={updateUserSession}\r\n\t\t\t\t\t    setRoute={setRoute} route={route} readTasks={readTasks}/>\r\n\t\t\t\t\t </div>)\r\n\t\t\t\tbreak;\r\n\t\t\t\tdefault: pageContent = (<h1> Page 404: Not found </h1>)\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\treturn (\r\n\t\t<div id=\"todo\">\r\n\t\t\t<Header userLogged={userLogged} setRoute={setRoute} \r\n\t\t\t route={route} updateUserSession={updateUserSession}/>\r\n\t\t\t<main>\r\n\t\t\t { pageContent }\r\n\t\t\t</main>\r\n\t\t\t<footer><span><a href=\"https://andresgornatti.github.io/andresGornatti/\" target=\"new\">@andresGornatti</a></span></footer>\r\n\t\t</div>\r\n\t )\r\n\t}\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","import {\r\n\tAGREGAR_TAREA,\r\n\tELIMINAR_TAREA,\r\n\tEDITAR_TAREA,\r\n\tLEER_TAREAS,\r\n \tACTUALIZAR_TAREA,\r\n \tSETEAR_RUTA,\r\n\tACTUALIZAR_SESION,\r\n\tLEER_USUARIO\r\n} from \"./constants\";\r\n\r\n\t\t\t//let idTaskCounter = 0;\r\nconst initialStateManageTasks = {\r\n\ttaskList: [\r\n\t],\r\n\troute: 'tasks',\r\n\tuserLogged: false,\r\n\tuser: null\r\n}\r\nexport const appReducer = (state=initialStateManageTasks,action={}) => {\r\n\tif(action.type===AGREGAR_TAREA && action.payload!==''){\r\n\t//\tconst {description, _id, taskState, color, category} = action.payload\r\n\t\r\n\t\tlet updateTaskList = //state.taskList.push({asd:\"asd\"});\r\n\t\t\t\t\t\t\t[...state.taskList, {...action.payload,leftButtonContent: 'icon-googleplay'\r\n\t\t\t\t\t\t\t\t\t\t\t\t  //leftButtonAction: 'activateTask', \r\n\t\t\t\t\t\t\t\t\t\t\t\t  //buttonActionClose: true,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  //, _id: idTaskCounter\r\n\t\t\t\t\t\t\t\t\t\t\t\t  // Al final las acciones no hace falta ponerlas como State, justamente son acciones y no estados.\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t  \t\t\t];\r\n\t\t\t//idTaskCounter++;\r\n\t\treturn Object.assign({}, state, {taskList:updateTaskList})\r\n\t} else {\r\n\t\tswitch(action.type){\r\n\t\t\tcase LEER_TAREAS: {\r\n\t\t\t\tlet updateTaskList = [...state.taskList, ...action.payload]\r\n\t\t\t\treturn {...state, taskList:updateTaskList}\r\n\t\t\t}\r\n\t\t\tcase ELIMINAR_TAREA: {\r\n\t\t\t\tlet updateTaskList = state.taskList.filter(task=>task._id!==action.idTask);\r\n\t\t\t\treturn Object.assign({}, state, {taskList:updateTaskList}); \r\n\t\t\t}\r\n\t\t\tcase EDITAR_TAREA: {\r\n\t\t\t\tlet updateTaskList = state.taskList.map(task=>{\r\n\t\t\t\t\tif(task._id===action.idTask){\r\n\t\t\t\t\t\ttask.description = action.payload;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn task;\r\n\t\t\t\t});\r\n\t\t\t\treturn Object.assign({}, state, {taskList:updateTaskList});\r\n\t\t\t}\r\n\t\t\tcase ACTUALIZAR_TAREA: {\r\n\t\t\t\tlet updateTaskList = state.taskList.map(task=>{\r\n\t\t\t\t\tif(task._id===action.idTask){\r\n\t\t\t\t\t\tconst updates = Object.keys(action.taskUpdate)\r\n\t\t\t\t\t\tupdates.forEach(upd=>task[upd]=action.taskUpdate[upd])\r\n\t\t\t\t\t\t//task.leftButtonContent= 'icon-ok-circled';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn task;\t\r\n\t\t\t\t});\r\n\t\t\t\treturn Object.assign({}, state, {taskList:updateTaskList});\r\n\t\t\t}\r\n\t\t\tcase SETEAR_RUTA: {\r\n\t\t\t\treturn {...state, route: action.payload}\r\n\t\t\t}\r\n\t\t\tcase  ACTUALIZAR_SESION: {\r\n\t\t\t\tswitch (action.sessionState){\r\n\t\t\t\t\tcase 'login':\r\n\t\t\t\t\tcase 'signup':\r\n\t\t\t\t\treturn Object.assign({}, state, {userLogged: true, user: action.user, taskList:[]})\r\n\t\t\t\t\t//return Object.assign({}, state, {userLogged: true, user: action.user, taskList:[]})\r\n\t\t\t\t\tcase 'logout':\r\n\t\t\t\t\treturn Object.assign({}, state, {userLogged: false, user: null, taskList:[]})\r\n\t\t\t\t\tdefault: return state\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcase  LEER_USUARIO: {\r\n\t\t\t\t\treturn Object.assign({}, state, {userLogged: true, user: action.user, taskList:[]})\r\n\t\t\t}\r\n\t\t\tdefault: return state;\r\n\t\t}\t\r\n\t}\r\n}\r\n\r\n","// ROBOFRIENDS\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import {Provider} from \"react-redux\";\n// import {createStore, applyMiddleware, combineReducers} from \"redux\";\n// import {createLogger} from \"redux-logger\";\n// import thunkMiddleware from \"redux-thunk\";\n// import {buscarRobots, requestRobots} from \"./robofriends/reducers\";\n// import App from './robofriends/containers/App';\n// import \"tachyons\";\n// import './index.css';\n// //import Card from \"./Card\";\n// //import CardList from \"./CardList\";\n// import * as serviceWorker from './serviceWorker';\n\n// const logger = createLogger();\n// const rootReducer = combineReducers({buscarRobots, requestRobots});\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n// ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// \t// If you want your app to work offline and load faster, you can change\n// \t// unregister() to register() below. Note this comes with some pitfalls.\n// \t// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n// ---------------------------------------------- //\n\n// TEMPLATE\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import \"tachyons\";\n// import './index.css';\n// import App from \"./maqueta/containers/App\";\n// import * as serviceWorker from './serviceWorker';\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// \t// If you want your app to work offline and load faster, you can change\n// \t// unregister() to register() below. Note this comes with some pitfalls.\n// \t// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\n// \t// Colores Novacor brand:   #452A9D #64598B   #FF9613 #FFAC44\n\n\n// ---------------------------------------------- //\n\n// TODO-REDUX\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./todoredux/containers/App\";\nimport {createStore} from \"redux\";\n\t//import {createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\n//import {createLogger} from \"redux-logger\";\n//import thunkMiddleware from \"redux-thunk\";\nimport {appReducer} from \"./todoredux/reducers\";\n\n//const logger = createLogger();\n\t \t//const rootReducer = combineReducers({manageTaskR, addTaskR});\n//\tconst store = createStore(appReducer, applyMiddleware(thunkMiddleware, logger));\nconst store = createStore(appReducer);\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n\n\n// ---------------------------------------------- //\n\n// MAGICBRAIN\n\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import \"./index.css\";\n// import App from \"./magicbrain/magicbrain/containers/App\";\n// import * as serviceWorker from './serviceWorker';\n// import 'tachyons'; \n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// serviceWorker.unregister();\n\n// ---------------------------------------------- //\n\n// GITHUB API\n\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import \"./index.css\";\n// import App from \"./githubFinder/containers/App\";\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}